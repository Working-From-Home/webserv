@startuml





/' Objects '/

class AHttpMessage {
	+AHttpMessage()
	+~AHttpMessage()
	#_headers : map_type
	+getHeaders() : map_type
	+getContentLength() : size_t
	#_content : std::string
	+getContent() : std::string
	+getHeader(std::string name) : std::string
	+addHeader(std::string name, std::string value) : void
	+readContent(std::istream is) : void
	+setContent(std::string content) : void
}


class HttpRequest {
	+HttpRequest()
	+~HttpRequest()
	+{static} create(std::istream& inputStream) : HttpRequest
	-_uri : Uri
	+getUri() : Uri&
	-_method : std::string
	-_version : std::string
	+toString() : std::string
	+getMethod() : std::string&
	+setMethod(std::string method) : void
	+setUri(const Uri& uri) : void
	+setVersion(std::string version) : void
	+write(std::ostream os) : void
}


class HttpResponse {
	+HttpResponse()
	+~HttpResponse()
	-_status : HttpStatus
	+getStatus() : int
	+getStatusMessage(int code) : std::string
	+toString() : std::string
	+read(std::istream is) : void
	+sendError(int code, std::ofstream out) : void
	+setContentLength(int contentLength) : void
	+setStatus(int code) : void
	+write(std::ostream os) : void
}


class HttpStatus {
	+HttpStatus()
	+~HttpStatus()
	+isClientError(int code) : bool
	+isError(int code) : bool
	+isInformational(int code) : bool
	+isRedirection(int code) : bool
	+isServerError(int code) : bool
	+isSuccessful(int code) : bool
	-_value : int
	+getValue() : int {query}
	+getMessage(int code) : std::string {query}
	+setValue(int code) : void
}


class Server {
	+Server(int port)
	+Server(const Server& s)
	+~Server()
	+operator=(const Server& s) : Server&
	+getReq(sckt::fd_type fd) : bool
	+getRequest(sckt::fd_type fd, std::string* request) : bool
	+start() : bool
	-_clients : clients_type
	-_port : int
	-_socket : sckt::Socket
	-_pfd : struct pollfd
	+connectClient() : void
	+disconnectClient(clients_type::iterator client) : void
	+manageClient(clients_type::iterator client) : void
	+stop() : void
	+update() : void
}


class ServerConfig {
	-ServerConfig(const std::string& filepath)
	-ServerConfig(ServerConfig &)
	-operator=(const ServerConfig &) : ServerConfig&
	+{static} getInstance(std::string filepath) : ServerConfig*
	-{static} _singleton : static ServerConfig*
	-_filepath : std::string
	+getFilepath() : std::string {query}
	-_servers : std::vector<ServerBlock>
	-_parse(std::istream &) : void
}


class ServerHandler {
	+ServerHandler(std::vector<int> ports)
	+~ServerHandler()
	-_servers : std::vector<Server>
	+run() : void
}


class Uri {
	+Uri()
	+Uri(const std::string& uri)
	+Uri(const std::string& scheme, const std::string& pathEtc)
	+Uri(const std::string& scheme, const std::string& authority, const std::string& pathEtc)
	+Uri(const std::string& scheme, const std::string& authority, const std::string& path, const std::string& query)
	+Uri(const std::string& scheme, const std::string& authority, const std::string& path, const std::string& query, const std::string& fragment)
	+Uri(Uri &)
	+~Uri()
	+operator=(const Uri &) : Uri&
	+operator=(const std::string& uri) : Uri&
	+empty() : bool {query}
	+isRelative() : bool {query}
	+isWellKnownPort() : bool {query}
	-_fragment : std::string
	-_host : std::string
	-_path : std::string
	-_query : std::string
	-_scheme : std::string
	-_userInfo : std::string
	+decode(std::string s) : std::string {query}
	+getAuthority() : std::string {query}
	+getFragment() : std::string
	+getHost() : std::string
	+getPath() : std::string
	+getPathAndQuery() : std::string {query}
	+getPathEtc() : std::string {query}
	+getQuery() : std::string {query}
	+getRawQuery() : std::string
	+getScheme() : std::string
	+getUserInfo() : std::string
	+toString() : std::string
	-_port : u_short
	+getPort() : u_short {query}
	+getSpecifiedPort() : u_short
	+getWellKnownPort() : u_short {query}
	-_lowerStringInPlace(std::string& s) : void
	-_parseAuthority(std::string::const_iterator& it, const std::string::const_iterator& end) : void
	-_parseHostAndPort(std::string::const_iterator& it, const std::string::const_iterator& end) : void
	-_parsePathEtc(std::string::const_iterator& it, const std::string::const_iterator& end) : void
	-_parseUri(const std::string& uri) : void
	+clear() : void
	+setAuthority(const std::string &) : void
	+setFragment(const std::string &) : void
	+setHost(const std::string &) : void
	+setPath(const std::string &) : void
	+setPathEtc(const std::string &) : void
	+setPort(u_short) : void
	+setQuery(const std::string &) : void
	+setRawQuery(const std::string &) : void
	+setScheme(const std::string &) : void
	+setSpecifiedPort(u_short) : void
	+setUserInfo(const std::string &) : void
}


class Uri::SyntaxError {
	-what() : char*
}


enum HttpStatus::Code {
	Accepted
	AlreadyReported
	BadGateway
	BadRequest
	Conflict
	Continue
	Created
	EarlyHints
	ExpectationFailed
	FailedDependency
	Forbidden
	Found
	GatewayTimeout
	Gone
	HTTPVersionNotSupported
	IMUsed
	ImATeapot
	InsufficientStorage
	InternalServerError
	LengthRequired
	Locked
	LoopDetected
	MethodNotAllowed
	MovedPermanently
	MultiStatus
	MultipleChoices
	NetworkAuthenticationRequired
	NoContent
	NonAuthoritativeInformation
	NotAcceptable
	NotExtended
	NotFound
	NotImplemented
	NotModified
	OK
	PartialContent
	PayloadTooLarge
	PaymentRequired
	PermanentRedirect
	PreconditionFailed
	PreconditionRequired
	Processing
	ProxyAuthenticationRequired
	RangeNotSatisfiable
	RequestHeaderFieldsTooLarge
	RequestTimeout
	ResetContent
	SeeOther
	ServiceUnavailable
	SwitchingProtocols
	TemporaryRedirect
	TooManyRequests
	URITooLong
	Unauthorized
	UnavailableForLegalReasons
	UnprocessableEntity
	UnsupportedMediaType
	UpgradeRequired
	UseProxy
	VariantAlsoNegotiates
}


class ServerConfig::ServerBlock {
	+errors : std::map<u_short, std::string>
	+root : std::string
	+serverName : std::string
	+listens : std::vector<Host>
	+indexes : std::vector<std::string>
}


class ServerConfig::ServerBlock::Host {
	+port : int
	+host : std::string
}


class ServerConfig::ServerBlock::Location {
	+fastCgiPass : Host
	+path : Uri
	+autoindex : bool
	+client_max_body_size : size_t
}


namespace clnt {
	class Client {
		+Client()
		+~Client()
		-_socket : sckt::Socket
		+getAddr() : sckt::addr_type {query}
		+getFd() : sckt::fd_type {query}
		-_pfd : struct pollfd
		+getPfd() : struct pollfd {query}
		+setAddr(sckt::addr_type addr) : void
		+setFd(sckt::fd_type fd) : void
		+setPfd() : void
	}
}


namespace parser {
	abstract class IScanner {
		+~IScanner()
		+{abstract} eof() : bool
		+{abstract} get() : char
		+{abstract} peek() : char
		+{abstract} unget() : char
		+{abstract} getColumn() : int
		+{abstract} getLine() : int
	}

	class Scanner {
		-Scanner()
		+Scanner(std::istream& inputStream)
		+~Scanner()
		+eof() : bool
		-_c : char
		+get() : char
		+peek() : char
		+unget() : char
		-_column : int
		-_lastColumn : int
		-_line : int
		+getColumn() : int
		+getLine() : int
		-_inStream : std::istream&
		-moveBackward() : void
		-moveForward() : void
	}

	class ScannerConfig {
		+ScannerConfig(std::istream& inputStream)
		+~ScannerConfig()
		-_scan : Scanner
		-_actualToken : Token
		-_makeToken(ScopedEnum ::TokenKind kind, std::string value) : Token
		-_makeToken(ScopedEnum ::TokenKind kind, std::string value, int column, int line) : Token
		+getToken() : Token
		+peekToken() : Token
		-_charIsString(char c) : bool
	}

	class ScannerFD {
		-ScannerFD()
		+ScannerFD(int fd)
		+~ScannerFD()
		+eof() : bool
		-_buffer : char
		-_c : char
		+get() : char
		+peek() : char
		+unget() : char
		-_column : int
		-_fd : int
		-_lastColumn : int
		-_line : int
		+getColumn() : int
		+getLine() : int
		-_idx : size_t
		+{static} bufferSize : static const size_t
		-moveBackward() : void
		-moveForward() : void
	}

	enum ScopedEnum::TokenKind {
		kColon
		kComma
		kEndOfInput
		kError
		kIdentifier
		kLeftBrace
		kNewLine
		kRightBrace
		kString
	}

	class ScopedEnum {
	}

	class Token {
		+kind : ScopedEnum ::TokenKind
		+column : int
		+line : int
		+value : std::string
	}

	namespace parser::http {
		class ScannerHttpRequest {
			+ScannerHttpRequest(std::istream& inputStream)
			+~ScannerHttpRequest()
			-_scan : Scanner
			-_actualToken : Token
			-_makeToken(ScopedEnum ::TokenKind kind, std::string value) : Token
			+getToken(bool skipLWS) : Token
			+peekToken() : Token
			-_charIsString(char c) : bool
			+getChar() : char
		}

		enum ScopedEnum::TokenKind {
			kCarriage
			kColon
			kComma
			kEndOfInput
			kError
			kLWS
			kLeftBrace
			kNewLine
			kRightBrace
			kString
		}

		class ScopedEnum {
		}

		class Token {
			+kind : ScopedEnum ::TokenKind
			+column : int
			+line : int
			+value : std::string
		}
	}
}


namespace sckt {
	class Socket {
		+Socket()
		+~Socket()
		+getAddrLen() : addrLen_type {query}
		+getAddr() : addr_type {query}
		+setFd(int domain, int type) : bool
		+getFd() : fd_type {query}
		-_fd : int
		-_addrLen : sckt::socklen_t
		-_addr : struct sockaddr_in
		+setAddr(int domain, int interface, int port) : void
		+setAddr(struct sockaddr_in addr) : void
		+setFd(int fd) : void
	}
}





/' Inheritance relationships '/

.AHttpMessage <|-- .HttpRequest


.AHttpMessage <|-- .HttpResponse


parser.IScanner <|-- parser.Scanner


parser.IScanner <|-- parser.ScannerFD





/' Aggregation relationships '/

clnt.Client *-- sckt.Socket


.HttpRequest *-- .Uri


.HttpResponse *-- .HttpStatus


parser.ScannerConfig *-- parser.Scanner


parser.ScannerConfig "2" *-- parser.Token


parser.parser::http.ScannerHttpRequest *-- parser.Scanner


parser.parser::http.ScannerHttpRequest "2" *-- parser.Token


.Server *-- sckt.Socket


.ServerConfig o-- .ServerConfig


.ServerConfig::ServerBlock::Location *-- .Uri


.ServerHandler *-- .Server


parser.Token "4" *-- parser.ScopedEnum






/' Nested objects '/

.HttpStatus +-- .HttpStatus::Code


parser.ScopedEnum +-- parser.ScopedEnum::TokenKind


parser.ScopedEnum +-- parser.parser::http.ScopedEnum::TokenKind


.ServerConfig +-- .ServerConfig::ServerBlock


.ServerConfig::ServerBlock +-- .ServerConfig::ServerBlock::Host


.ServerConfig::ServerBlock +-- .ServerConfig::ServerBlock::Location


.Uri +-- .Uri::SyntaxError




@enduml
