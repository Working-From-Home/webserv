name: C/C++ CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  integration-tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
#        os: [ubuntu-latest, macos-latest]
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '16'
    - name: Install dependencies
      run: |
        set -x
        if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install valgrind
        elif [ "$RUNNER_OS" == "macOS" ]; then
            :
        fi
    - run: make
    - run: npm install
    - name: npm test
      run: |
        # set -x
        if [ "$RUNNER_OS" == "Linux" ]; then
            sudo valgrind --log-file=valgrind_output --leak-check=full --show-leak-kinds=definite,indirect,possible --errors-for-leak-kinds=definite,indirect,possible --error-exitcode=42 ./webserv &
            PID_SUDO=$!
            npm test
            sudo kill $(sudo ps --ppid $PID_SUDO -o pid=)
            wait $PID_SUDO && true
            RET=$?
            cat valgrind_output
            exit $RET
        elif [ "$RUNNER_OS" == "macOS" ]; then
            MallocStackLoggingNoCompact=1
            ./webserv &
            PID=$!
            npm test -- --detectOpenHandles
            leaks webserv
            kill $PID
        fi

  unit-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        set -x
        if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install valgrind
        elif [ "$RUNNER_OS" == "macOS" ]; then
            :
        fi
    - run: make -C tests
    # - name: make check
    #   run: make check -C tests
    - name: Run test
      run: |
        set -x
        cd tests
        if [ "$RUNNER_OS" == "Linux" ]; then
          valgrind --leak-check=full --show-leak-kinds=definite,indirect,possible --errors-for-leak-kinds=definite,indirect,possible --error-exitcode=42 ./build/tests
        elif [ "$RUNNER_OS" == "macOS" ]; then
          make check
        fi


  siege:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 3
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        set -x
        if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install siege
        elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install siege
        fi
    - run: make
    - name: siege
      run: |
        sudo ./webserv > /dev/null &
        siege -t 30S http://localhost:80/autoindex


  
  # unit-tests-leaks:
  #   needs: unit-tests
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, macos-latest]
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Install dependencies
  #     run: |
  #       set -x
  #       if [ "$RUNNER_OS" == "Linux" ]; then
  #           sudo apt-get install valgrind
  #       elif [ "$RUNNER_OS" == "macOS" ]; then
  #           :
  #       fi
  #   - name: make -C tests
  #     run: make -C tests
  #   - name: Run leak test
  #     run: |
  #       set -x
  #       cd tests
  #       if [ "$RUNNER_OS" == "Linux" ]; then
  #           valgrind --leak-check=full --show-leak-kinds=definite,indirect,possible --errors-for-leak-kinds=definite,indirect,possible --error-exitcode=42 ./build/tests
  #       elif [ "$RUNNER_OS" == "macOS" ]; then
  #           # MallocStackLoggingNoCompact=1
  #           # ./build/tests &
  #           # leaks ./build/tests
  #           :
  #       else
  #           echo "$RUNNER_OS not supported"
  #           exit 1
  #       fi
